;;; Init --- Summary(require 'package)(add-to-list 'load-path "~/.emacs.d/mylibs/")(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t);;; Commentary:;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`;; and `package-pinned-packages`.  Most users will not need or want to do this.;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)(package-initialize)(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(custom-safe-themes   (quote    ("2f1518e906a8b60fac943d02ad415f1d8b3933a5a7f75e307e6e9a26ef5bf570" "69e5703b797b116bb6d829709bb2a1a5a38e23b2b05d8f58e24c9a5594977065" default))) '(org-agenda-files   (quote    ("~/Notes/organizer.org" "~/Notes/my_go_notes.org" "~/Notes/security_with_tom.org" "~/Notes/learn_emacs.org" "~/Notes/Sprints.org" "~/Notes/setting_up_env.org"))) '(package-selected-packages   (quote    (haskell-mode dockerfile-mode rvm rubocop emmet-mode prettier-js ## web-mode flycheck jsonnet-mode protobuf-mode rhtml-mode rinari rjsx-mode org-pomodoro flx-ido neotree flymake-go magit json-mode yaml-mode yasnippet company-lsp company lsp-ui lsp-mode go-autocomplete auto-complete exec-path-from-shell go-mode treemacs dashboard projectile helm doom-modeline doom-themes which-key use-package nova-theme))))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(default ((t (:inherit nil :stipple nil :background "#282c34" :foreground "#bbc2cf" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :foundry "DAMA" :family "InconsolataGo NF")))));;; Code:(unless (package-installed-p 'use-package)  (package-refresh-contents)  (package-install 'use-package));; move below(use-package which-key  :ensure t  :config (which-key-mode))(use-package doom-themes  :ensure t  :config  (load-theme 'doom-one))(use-package doom-modeline  :ensure t  :hook (after-init . doom-modeline-mode))(use-package all-the-icons  :ensure t);; Don't show startup up message(setq inhibit-startup-message t);; Don't show toolbar at the top(tool-bar-mode -1);; Don't show menu(menu-bar-mode -1);; Don't show scroll bar(scroll-bar-mode -1);; Highlight currently editing line(global-hl-line-mode +1);; Delete text after selecting(delete-selection-mode 1);; Use a different backup directory(setq backup-directory-alist '(("." . "~/.saves")));; Display line numbers when using programming mode(global-display-line-numbers-mode);; Show matching parenthesis(show-paren-mode 1);; Insert right matching bracket(electric-pair-mode 1)(add-hook 'text-mode-hook 'turn-on-visual-line-mode)(defun split-and-follow-horizontally ()  (interactive)  (split-window-below)  (balance-windows)  (other-window 1))(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)(defun split-and-follow-vertically ()  (interactive)  (split-window-right)  (balance-windows)  (other-window 1))(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)(global-set-key (kbd "C-c a") 'org-agenda)(use-package projectile  :ensure t  :config  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)  (projectile-mode +1))(projectile-mode)(defun my-switch-project-hook ()  (go-set-project))(add-hook 'projectile-after-switch-project-hook #'my-switch-project-hook);;; Dashboard(use-package dashboard  :ensure t  :init  (progn    (setq dashboard-items '((recents . 1)			    (projects . 1)))    (setq dashboard-show-shortcuts nil)    (setq dashboard-center-content nil)    (setq dashboard-banner-logo-title "HACK AWAY")    (setq dashboard-set-file-icons t)    (setq dashboard-set-heading-icons t)    (setq dashboard-startup-banner "~/banner.png")    (setq dashboard-set-navigator t)    ;; format: "(icon title help action face prefix sufix)"    (setq dashboard-navigator-buttons	  `(;; lin1	    ((,nil	      "init file"	      "Open init file"	      (lambda (&rest _) (find-file "~/.emacs"))	      )))	  )    )  :config  (dashboard-setup-startup-hook))(use-package treemacs  :ensure t  :config  (setq treemacs-is-never-other-window t));;; GO MODE;;Load Go-specific language syntax(when (memq window-system '(mac ns))  (exec-path-from-shell-initialize)  (exec-path-from-shell-copy-env "GOPATH"));; Define function to call when go-mode loads(defun my-go-mode-hook ()  (add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save  (setq gofmt-command "goimports")                ; gofmt uses invokes goimports  (if (not (string-match "go" compile-command))   ; set compile command default      (set (make-local-variable 'compile-command)           "go build -v && go test -v && go vet"))  ;; guru settings  (go-guru-hl-identifier-mode)                    ; highlight identifiers    ;; Key bindings specific to go-mode  (local-set-key (kbd "M-.") 'godef-jump)         ; Go to definition  (local-set-key (kbd "M-*") 'pop-tag-mark)       ; Return from whence you came  (local-set-key (kbd "M-p") 'compile)            ; Invoke compiler  (local-set-key (kbd "M-P") 'recompile)          ; Redo most recent compile cmd  (local-set-key (kbd "M-]") 'next-error)         ; Go to next error (or msg)  (local-set-key (kbd "M-[") 'previous-error)     ; Go to previous error or msg  ;; Misc go stuff  (auto-complete-mode 1))                         ; Enable auto-complete mode;; Connect go-mode-hook with the function we just defined(add-hook 'go-mode-hook 'my-go-mode-hook);; Ensure the go specific autocomplete is active in go-mode.(with-eval-after-load 'go-mode  (require 'go-autocomplete));; If the go-guru.el file is in the load path, this will load it.(require 'go-guru);; END OF GO MODE(global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)(setq compilation-scroll-output t)(require 'magit)(global-set-key (kbd "C-x g") 'magit-status);; don't autosave files in the same directory(setq backup-directory-alist      `((".*" . "~/.emacs.d/auto-save")))(setq auto-save-file-name-transforms      `((".*" "~/.emacs.d/auto-save" t)))(setq visible-bell nil)             ; Disable annoying visual bell graphic(setq ring-bell-function 'ignore)   ; Disable super annoying audio bell;; Ruby;; rinari(add-to-list 'load-path "~/.emacs.d/rinari")(require 'rinari)(global-rinari-mode);; ido(require 'ido)(ido-mode t);; rubocop(require 'rubocop)(setq rubocop-check-command "~/.rbenv/shims/rubocop --format emacs")(defun rubocop-ensure-installed () );; Protobuf(require 'protobuf-mode);; json(require 'json-mode);; flycheck(require 'flycheck)(setq-default flycheck-disabled-checkers	      (append flycheck-disabled-checkers		      '(javascript-jshint json-jsonlint)));; Enable eslint checker for web-mode(flycheck-add-mode 'javascript-eslint 'web-mode);; Enable flycheck globally(add-hook 'after-init-hook #'global-flycheck-mode);; docker-file mode(require 'dockerfile-mode)(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))(provide '.emacs);;; .emacs ends here