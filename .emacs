;;; Init --- Summary(require 'package)(add-to-list 'load-path "~/.emacs.d/mylibs/")(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t);;; Commentary:;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`;; and `package-pinned-packages`.  Most users will not need or want to do this.;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)(setq custom-safe-themes t);;; .emacs ends here(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(custom-safe-themes   '("8c7e832be864674c220f9a9361c851917a93f921fedb7717b1b5ece47690c098" default)) '(package-selected-packages   '(protobuf-mode which-key projectile json-mode go-mode gnu-elpa-keyring-update exec-path-from-shell doom-themes doom-modeline dockerfile-mode dashboard corfu all-the-icons)))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. )(package-initialize);; Set default font(set-face-attribute 'default nil :font "JetBrains Mono-12");;; Code:(unless (package-installed-p 'use-package)  (package-refresh-contents)  (package-install 'use-package));; FORMATTING(use-package which-key  :ensure t  :config (which-key-mode))(use-package doom-themes  :ensure t  :config  (load-theme 'doom-dracula))(use-package doom-modeline  :ensure t  :hook (after-init . doom-modeline-mode))(use-package all-the-icons  :ensure t);; Don't show startup up message(setq inhibit-startup-message t);; Don't show toolbar at the top(tool-bar-mode -1);; Don't show menu(menu-bar-mode -1);; Don't show scroll bar(scroll-bar-mode -1);; Highlight currently editing line(global-hl-line-mode +1);; Delete text after selecting(delete-selection-mode 1);; Use a different backup directory(setq backup-directory-alist '(("." . "~/.saves")));; Display line numbers when using programming mode(global-display-line-numbers-mode);; Show matching parenthesis(show-paren-mode 1);; Insert right matching bracket(electric-pair-mode 1)(add-hook 'text-mode-hook 'turn-on-visual-line-mode);; don't autosave files in the same directory(setq backup-directory-alist      `((".*" . "~/.emacs.d/auto-save")))(setq auto-save-file-name-transforms      `((".*" "~/.emacs.d/auto-save" t)))(setq visible-bell nil)             ; Disable annoying visual bell graphic(setq ring-bell-function 'ignore)   ; Disable super annoying audio bell;; OPENING FILES AND BUFFERS;; do(require 'ido)(setq ido-enable-flex-matching t)(setq ido-everywhere t)(ido-mode 1)(setq ido-create-new-buffer 'always);; org mode(global-set-key (kbd "C-c a") 'org-agenda);; WINDOWS(defun split-and-follow-horizontally ()  (interactive)  (split-window-below)  (balance-windows)  (other-window 1))(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)(defun split-and-follow-vertically ()  (interactive)  (split-window-right)  (balance-windows)  (other-window 1))(global-set-key (kbd "C-x 3") 'split-and-follow-vertically);; PROJECTILE(use-package projectile  :ensure t  :config  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)  (projectile-mode +1))(projectile-mode)(defun my-switch-project-hook ()  (go-set-project))(add-hook 'projectile-after-switch-project-hook #'my-switch-project-hook);;; Dashboard(use-package dashboard  :ensure t  :init  (progn    (setq dashboard-items '((recents . 1)			    (projects . 1)))    (setq dashboard-show-shortcuts nil)    (setq dashboard-center-content nil)    (setq dashboard-banner-logo-title "HACK AWAY")    (setq dashboard-set-file-icons t)    (setq dashboard-set-heading-icons t)    (setq dashboard-startup-banner "~/banner.png")    (setq dashboard-set-navigator t)    ;; format: "(icon title help action face prefix sufix)"    (setq dashboard-navigator-buttons	  `(;; lin1	    ((,nil	      "init file"	      "Open init file"	      (lambda (&rest _) (find-file "~/.emacs"))	      )))	  )    )  :config  (dashboard-setup-startup-hook));;; GO MODE;;Load Go-specific language syntax(when (memq window-system '(mac ns))  (exec-path-from-shell-initialize)  (exec-path-from-shell-copy-env "GOPATH"));; -------------------------------;; Modern Go Development Setup;; -------------------------------;; GO MODE + LSP(use-package go-mode  :ensure t  :hook ((go-mode . my-go-mode-setup)))(defun my-go-mode-setup ()  ;; Format with goimports on save  (setq gofmt-command "goimports")  (add-hook 'before-save-hook #'gofmt-before-save nil t)  ;; Set default compile command  (unless (string-match "go" compile-command)    (setq-local compile-command "go build -v && go test -v && go vet"))  ;; Keybindings  (local-set-key (kbd "M-p") 'compile)  (local-set-key (kbd "M-P") 'recompile)  (local-set-key (kbd "M-]") 'next-error)  (local-set-key (kbd "M-[") 'previous-error)  ;; Enable LSP  (eglot-ensure)  ;; Flymake for diagnostics  (flymake-mode 1));; LSP backend using gopls(use-package eglot  :ensure t  :config  (add-to-list 'eglot-server-programs '(go-mode . ("gopls"))));; Lightweight, responsive auto-completion(use-package corfu  :ensure t  :custom  (corfu-auto t)  (corfu-auto-delay 0.1)  (corfu-auto-prefix 1)  (corfu-cycle t)  (corfu-preview-current nil)  (corfu-quit-no-match 'separator)  :init  (global-corfu-mode));; Helpful documentation on hover (uses gopls)(use-package eldoc  :ensure t  :hook (eglot-managed-mode . eldoc-mode));; Flymake works out of the box with eglot(use-package flymake  :ensure t  :hook (prog-mode . flymake-mode));; Enable project support via built-in project.el(use-package project  :ensure t  :bind-keymap ("C-c p" . project-prefix-map)  :config  (setq project-switch-commands        '((?f "Find file" project-find-file)          (?s "Search" project-find-regexp)          (?b "Switch to buffer" project-switch-to-buffer)          (?c "Compile project" project-compile))));; Optional: Projectile (if you prefer it over project.el);; (use-package projectile;;   :ensure t;;   :config;;   (projectile-mode +1);;   (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map));; END OF GO MODE;; -------------------------------;; Language-Specific Modes & Tools;; -------------------------------(use-package protobuf-mode  :ensure t  :mode ("\\.proto\\'" . protobuf-mode))(use-package json-mode  :ensure t  :mode ("\\.json\\'" . json-mode))(use-package dockerfile-mode  :ensure t  :mode ("Dockerfile\\'" . dockerfile-mode))(provide '.emacs)